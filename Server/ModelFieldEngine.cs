using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace OpenCodeDev.NetCMS.Core.Compiler
{
    public static class ModelFieldEngine
    {
        /// <summary>
        /// Define as Key for EF CORE
        /// </summary>
        public const string ATTRKEY = "[Key]";
        /// <summary>
        /// Define as a Column EF CORE
        /// </summary>
        public const string ATTRCOLUMN = "[Column]";
        /// <summary>
        /// Define as Required in EF CORE and Edit Context.
        /// </summary>
        public const string ATTRREQUIRED = @"[Required(ErrorMessage = ""The field '{0}' is required.'"")]";
        /// <summary>
        /// Define as Auto Generated by the Database Engine to ensure uniqueness.
        /// </summary>
        public const string ATTRDBGENID = "[DatabaseGenerated(DatabaseGeneratedOption.Identity)]";
        /// <summary>
        /// Guid cannot be left unset or as default in Edit Context.
        /// </summary>
        public const string ATTRGUIDNOTDEFAULT = @"[RegularExpression(""^((?!00000000-0000-0000-0000-000000000000).)*$"", ErrorMessage = ""The field '{0}' cannot be null or default.'"")]";
        
        /// <summary>
        /// Validation Pattern
        /// </summary>
        public const string ATTRREGEX = @"[RegularExpression(""{0}"", ErrorMessage = ""The field '{1}' format is incorrect.'"")]";

        /// <summary>
        /// ProtoMember is there for GRPC
        /// </summary>
        public const string ATTRPROTOMEMEBER = "[ProtoMember({0})]";

        public static bool CheckRequiredField(JObject field)
        {
            JToken jData = field.SelectToken("Required");
            return jData == null ? false : jData.ToObject<bool>() ? true : false;
        }
        public static string GetRequiredAttr(string name, JObject field)
        {
            return CheckRequiredField(field) ? String.Format(ATTRREQUIRED, name) : "";
        }
        public static bool CheckValidationPatternField(JObject field)
        {
            JToken jData = field.SelectToken("ValidationPattern");
            return jData == null ? false : jData.ToObject<bool>() ? true : false;
        }
        public static string GetValidationPatternAttr(string name, JObject field)
        {
            return CheckValidationPatternField(field) ? String.Format(ATTRREQUIRED, name) : "";
        }
        
        public static bool CheckServerOnlyField(JObject field)
        {
            JToken jData = field.SelectToken("ServerOnly");
            return jData == null ? false : jData.ToObject<bool>() ? true : false;
        }
        public static bool CheckProtoMemberField(JObject field)
        {
            return CheckServerOnlyField(field) ? true : false;
        }
        public static string GetProtoMemberAttr(int order, JObject field)
        {
            return CheckProtoMemberField(field) ? String.Format(ATTRPROTOMEMEBER, order) : "";
        }
        public static bool CheckCalculatedField(JObject field)
        {
            JToken jData = field.SelectToken("Calculated");
            return jData == null ? false : jData.ToObject<bool>() ? true : false;
        }
        public static bool CheckUniqueField(JObject field)
        {
            JToken jData = field.SelectToken("Unique");
            return jData == null ? false : jData.ToObject<bool>() ? true : false;
        }
        public static bool CheckTypeFieldExist(JObject field)
        {
            JToken jData = field.SelectToken("Type");
            return jData == null ? false : true;
        }

        public static string GetColumnAttr(JObject options){
            return CheckCalculatedField(options) ? "" : ATTRCOLUMN;
        }
        public static string ExtractAllAttributes(int order, string name, JObject options)
        {
            return GetRequiredAttr(name, options) + GetProtoMemberAttr(order, options) + GetColumnAttr(options);
        }
        public static string GetTypeWhenAllowed(JObject field)
        {
            
            if (CheckTypeFieldExist(field)) { throw new Exception($"The Type key was not located, check the model.json of one of the api file."); }
            string type = field.SelectToken("Type").ToString(); // Extract Data Type
            if (typeof(string).ToString() == type || typeof(int).ToString() == type || typeof(float).ToString() == type ||
                typeof(double).ToString() == type || typeof(Guid).ToString() == type || typeof(long).ToString() == type)
            {
                return type;
            }
            throw new Exception($"The type {type} is not supported, check the model.json of one of the api file.");
        }

        public static string BuildIdentifierField()
        {
            string attr = $"{ModelFieldEngine.ATTRCOLUMN}{ModelFieldEngine.ATTRDBGENID}{String.Format(ModelFieldEngine.ATTRGUIDNOTDEFAULT, "Id")} " +
                            $"{ModelFieldEngine.ATTRKEY} {String.Format(ModelFieldEngine.ATTRREQUIRED, "Id")}";
            return $"{attr} {String.Format(ModelFieldEngine.ATTRPROTOMEMEBER, "0")} public Guid Id {{ get; set; }} ";
        }

        public static void BuildModelFields(JObject json, out string privFields, out string pubFields)
        {
            string privateFields = ""; // Will not be available from shared only on server side
            string publicFields = "";
            int order = 1;
            foreach (var item in json.SelectToken("Properties").ToObject<JObject>())
            {
                string tmpField = "public ";
                string propName = item.Key;
                JObject options = item.Value.ToObject<JObject>();
                string tmpAttrbutes = ModelFieldEngine.ExtractAllAttributes(order, propName, options);
                // Extract Type, if not required add ? so EF core thinks its optional.
                string propType = $"{ModelFieldEngine.GetTypeWhenAllowed(options)}{(ModelFieldEngine.CheckRequiredField(options) ? "" : "?")}";

                tmpField += $"{propType} {item.Key} ";
                tmpField += "{get; set;} ";
                if (ModelFieldEngine.CheckServerOnlyField(options))
                { privateFields += tmpField; }
                else
                {
                    publicFields += tmpField;
                    order++;
                }

                Debug.WriteLine($"Generated User Field: {tmpField}");
            }
            privFields = privateFields;
            pubFields = publicFields;
        }
    }
}
